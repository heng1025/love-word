// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "./utils.js";
import * as Database from "./Database.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var dbInstance = Database.getDB(undefined);

async function translateMessageHandler(msg, sendResponse) {
  var ret = await Utils.adapterTrans(msg.text);
  return sendResponse(ret);
}

async function favAddMessageHandler(msg, tab, sendResponse) {
  var db = await dbInstance;
  await db.add("favorite", {
        url: tab.url,
        title: tab.title,
        favIconUrl: tab.favIconUrl,
        date: Date.now(),
        text: msg.text,
        trans: msg.trans
      }, undefined);
  return sendResponse(true);
}

async function favGetOneMessageHandler(msg, sendResponse) {
  var db = await dbInstance;
  var ret = await db.getFromIndex("favorite", "text", msg.text);
  return sendResponse(ret);
}

async function favDeleteOneMessageHandler(msg, sendResponse) {
  var db = await dbInstance;
  var key = await db.getKeyFromIndex("favorite", "text", msg.text);
  await db.delete("favorite", key);
  return sendResponse(false);
}

async function recordDeleteManyMessageHandler(recordType, msg, sendResponse) {
  var db = await dbInstance;
  var tx = db.transaction(recordType, "readwrite");
  var pstores = msg.dates.map(function (item) {
        return tx.store.delete(item);
      });
  await Promise.all(pstores);
  return sendResponse(false);
}

async function recordMessageHandler(recordType, extraAction, sendResponse) {
  if (extraAction) {
    var db = await dbInstance;
    await db.clear(recordType);
    return sendResponse(undefined);
  }
  var db$1 = await dbInstance;
  var ret = await db$1.getAllFromIndex(recordType, "text");
  return sendResponse(ret);
}

async function historyAddMessageHandler(msg, tab, sendResponse) {
  var db = await dbInstance;
  var ret = await db.getFromIndex("history", "text", msg.text);
  var match = !ret;
  if (match) {
    await db.add("history", {
          date: Date.now(),
          text: msg.text,
          url: tab.url,
          title: tab.title,
          favIconUrl: tab.favIconUrl
        }, undefined);
  }
  return sendResponse(undefined);
}

chrome.runtime.onMessage.addListener(function (message, sender, sendResponse) {
      var v = sender.tab;
      var tab = v !== undefined ? Caml_option.valFromOption(v) : ({
            url: sender.url,
            title: "Love Word",
            favIconUrl: "" + sender.origin + "/icons/lw32x32.png"
          });
      switch (message.TAG | 0) {
        case /* TranslateMsgContent */0 :
            translateMessageHandler(message._0, sendResponse);
            break;
        case /* FavAddMsgContent */1 :
            favAddMessageHandler(message._0, tab, sendResponse);
            break;
        case /* FavGetOneMsgContent */2 :
            favGetOneMessageHandler(message._0, sendResponse);
            break;
        case /* FavDeleteOneMsgContent */3 :
            favDeleteOneMessageHandler(message._0, sendResponse);
            break;
        case /* FavDeleteManyMsgContent */4 :
            recordDeleteManyMessageHandler("favorite", message._0, sendResponse);
            break;
        case /* FavExtraMsgContent */5 :
            recordMessageHandler("favorite", message._0, sendResponse);
            break;
        case /* HistoryAddMsgContent */6 :
            historyAddMessageHandler(message._0, tab, sendResponse);
            break;
        case /* HistoryDeleteManyMsgContent */7 :
            recordDeleteManyMessageHandler("history", message._0, sendResponse);
            break;
        case /* HistoryExtraMsgContent */8 :
            recordMessageHandler("history", message._0, sendResponse);
            break;
        
      }
      return true;
    });

export {
  dbInstance ,
  translateMessageHandler ,
  favAddMessageHandler ,
  favGetOneMessageHandler ,
  favDeleteOneMessageHandler ,
  recordDeleteManyMessageHandler ,
  recordMessageHandler ,
  historyAddMessageHandler ,
}
/* dbInstance Not a pure module */
