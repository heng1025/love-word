// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "./utils.js";
import * as Database from "./Database.js";

var dbInstance = Database.getDB(undefined);

chrome.runtime.onMessage.addListener(function (message, sender, sendResponse) {
      var mType = message._type;
      var v = message.text;
      var mText = v !== undefined ? v : "";
      var tab = sender.tab;
      if (typeof mType === "number") {
        Utils.adapterTrans(mText).then(function (ret) {
              sendResponse(ret);
              return Promise.resolve(undefined);
            });
      } else if (mType.TAG === /* HISTORY */0) {
        if (mType._0 !== 0) {
          Promise.resolve(undefined);
        } else {
          dbInstance.then(function (db) {
                return db.getFromIndex("history", "text", mText).then(function (ret) {
                            if (!ret) {
                              db.add("history", {
                                    date: Date.now(),
                                    text: mText,
                                    url: tab.url,
                                    title: tab.title,
                                    favIconUrl: tab.favIconUrl
                                  }, undefined);
                            }
                            return Promise.resolve(undefined);
                          });
              });
        }
      } else {
        switch (mType._0) {
          case /* ADD */0 :
              dbInstance.then(function (db) {
                    db.add("favorite", {
                          date: Date.now(),
                          text: mText,
                          trans: message.trans,
                          url: tab.url,
                          title: tab.title,
                          favIconUrl: tab.favIconUrl
                        }, undefined);
                    sendResponse(true);
                    return Promise.resolve(undefined);
                  });
              break;
          case /* GET */1 :
              dbInstance.then(function (db) {
                    return db.getFromIndex("favorite", "text", mText).then(function (ret) {
                                if (ret) {
                                  sendResponse(true);
                                } else {
                                  sendResponse(false);
                                }
                                return Promise.resolve(undefined);
                              });
                  });
              break;
          case /* GETALL */2 :
              dbInstance.then(function (db) {
                    return db.getAllFromIndex("favorite", "text").then(function (ret) {
                                sendResponse(ret);
                                return Promise.resolve(undefined);
                              });
                  });
              break;
          case /* DELETE */3 :
              dbInstance.then(function (db) {
                    db.getKeyFromIndex("favorite", "text", mText).then(function (key) {
                          db.delete("favorite", key);
                          sendResponse(undefined);
                          return Promise.resolve(undefined);
                        });
                    return Promise.resolve(undefined);
                  });
              break;
          case /* CLEAR */4 :
              Promise.resolve(undefined);
              break;
          
        }
      }
      return true;
    });

export {
  dbInstance ,
}
/* dbInstance Not a pure module */
