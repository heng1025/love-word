// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Widget from "./Widget.js";
import * as DictPanel from "./DictPanel.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as MachineTPanel from "./MachineTPanel.js";

function TranslateResult$StatelessTPanel(props) {
  var className = props.className;
  var data = props.data;
  var baseClasses = "lw-scroll-wrap max-h-52 overflow-y-auto overscroll-contain";
  var classes = className !== undefined ? baseClasses + " " + className : baseClasses;
  var tmp;
  tmp = typeof data === "object" && !Array.isArray(data) ? React.createElement(DictPanel.make, {
          data: data
        }) : React.createElement(MachineTPanel.make, {
          data: data
        });
  return React.createElement("div", {
              className: classes
            }, tmp);
}

var StatelessTPanel = {
  make: TranslateResult$StatelessTPanel
};

function TranslateResult(props) {
  var __className = props.className;
  var __delay = props.delay;
  var data = props.data;
  var __loading = props.loading;
  var loading = __loading !== undefined ? __loading : false;
  var delay = __delay !== undefined ? __delay : 0;
  var className = __className !== undefined ? __className : "";
  var tmp;
  if (data !== undefined) {
    if (data.TAG === "Ok") {
      var val = data._0;
      tmp = (val == null) ? "No translation" : React.createElement(TranslateResult$StatelessTPanel, {
              data: val,
              className: className
            });
    } else {
      tmp = React.createElement("div", {
            className: "text-error"
          }, data._0);
    }
  } else {
    tmp = null;
  }
  return React.createElement(Widget.Loading.make, {
              loading: loading,
              delay: delay,
              children: Caml_option.some(tmp)
            });
}

var make = TranslateResult;

export {
  StatelessTPanel ,
  make ,
}
/* react Not a pure module */
