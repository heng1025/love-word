// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../Utils.js";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";

function useRecord(recordType) {
  var match = React.useState(function () {
        return [];
      });
  var setRecords = match[1];
  var records = match[0];
  var getExtraMsgContent = function (action) {
    if (recordType === "history") {
      return {
              TAG: "HistoryExtraMsgContent",
              _0: action
            };
    } else {
      return {
              TAG: "FavExtraMsgContent",
              _0: action
            };
    }
  };
  var getDeleteManyMsgContent = function (records) {
    if (recordType === "history") {
      return {
              TAG: "HistoryDeleteManyMsgContent",
              _0: records
            };
    } else {
      return {
              TAG: "FavDeleteManyMsgContent",
              _0: records
            };
    }
  };
  var getAddManyMsgContent = function (records) {
    if (recordType === "history") {
      return {
              TAG: "HistoryAddManyMsgContent",
              _0: records
            };
    } else {
      return {
              TAG: "FavAddManyMsgContent",
              _0: records
            };
    }
  };
  var getAll = async function () {
    var ret = await chrome.runtime.sendMessage(getExtraMsgContent("GetAll"));
    var rs = ret.sort(function (v1, v2) {
            return v2.date - v1.date | 0;
          }).map(function (v) {
          var newrecord = Caml_obj.obj_dup(v);
          newrecord.checked = false;
          return newrecord;
        });
    return setRecords(function (param) {
                return rs;
              });
  };
  React.useEffect((function () {
          getAll();
        }), [recordType]);
  var onSearch = function (val) {
    if (val !== "") {
      var rs = records.filter(function (item) {
            return Utils.includeWith(item.text, val);
          });
      return setRecords(function (param) {
                  return rs;
                });
    }
    getAll();
  };
  var onCheck = function (record) {
    var rs = records.map(function (v) {
          var checked = record.checked;
          if (record.date === v.date) {
            v.checked = !checked;
          }
          return v;
        });
    setRecords(function (param) {
          return rs;
        });
  };
  var onCancel = function () {
    var rs = records.map(function (v) {
          var newrecord = Caml_obj.obj_dup(v);
          newrecord.checked = false;
          return newrecord;
        });
    setRecords(function (param) {
          return rs;
        });
  };
  var onDelete = async function (checkedRecords) {
    await chrome.runtime.sendMessage(getDeleteManyMsgContent({
              records: checkedRecords.map(function (v) {
                    return {
                            text: v.text,
                            date: v.date
                          };
                  })
            }));
    return await getAll();
  };
  var onSync = async function (checkedRecords) {
    await chrome.runtime.sendMessage(getAddManyMsgContent(checkedRecords));
    return await getAll();
  };
  var onClear = async function () {
    await chrome.runtime.sendMessage(getExtraMsgContent("Clear"));
    return await getAll();
  };
  return {
          records: records,
          onCheck: onCheck,
          onSearch: onSearch,
          onSync: (function (args) {
              onSync(args);
            }),
          onDelete: (function (args) {
              onDelete(args);
            }),
          onClear: (function () {
              onClear();
            }),
          onCancel: onCancel
        };
}

export {
  useRecord ,
}
/* Utils Not a pure module */
