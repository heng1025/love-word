// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Login from "./Login.js";
import * as Utils from "../Utils.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as $$History from "./History.js";
import * as Database from "../Database.js";
import * as Favorite from "./Favorite.js";
import * as Shortcut from "./Shortcut.js";
import * as TranslateService from "./TranslateService.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.js";

async function getRecordsWithServer(recordType) {
  var recordMsg;
  recordMsg = recordType === "history" ? ({
        TAG: "HistoryExtraMsgContent",
        _0: "GetAll"
      }) : ({
        TAG: "FavExtraMsgContent",
        _0: "GetAll"
      });
  var retLocal = await chrome.runtime.sendMessage(recordMsg);
  var val = await Utils.recordRemoteAction(recordType, undefined, undefined);
  var retFromServers;
  retFromServers = val.TAG === "Ok" ? val._0 : [];
  var tranverseLocals = {
    contents: retLocal
  };
  if (tranverseLocals.contents.length === 0) {
    tranverseLocals.contents = retFromServers;
  }
  var db = await Database.getDB();
  var concatLocalWithRemote = function (acc, local) {
    local.sync = false;
    retFromServers.forEach(function (remote) {
          var isTextExisted = local.text === remote.text;
          if (isTextExisted) {
            local.sync = true;
            db.put(recordType, local, undefined);
            return ;
          }
          remote.sync = true;
          var isNotAtLocal = tranverseLocals.contents.every(function (v) {
                return v.text !== remote.text;
              });
          var isNotAtAcc = acc.every(function (v) {
                return v.text !== remote.text;
              });
          if (isNotAtLocal && isNotAtAcc) {
            acc.push(remote);
            return ;
          }
          
        });
    return acc;
  };
  var records = tranverseLocals.contents.reduce(concatLocalWithRemote, []);
  var tx = db.transaction(recordType, "readwrite");
  var pstores = records.map(function (item) {
        return tx.store.add(item);
      });
  pstores.push(tx.done);
  try {
    await Promise.all(pstores);
    return ;
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === Js_exn.$$Error) {
      var msg = err._1.message;
      if (msg !== undefined) {
        console.log(msg);
      } else {
        console.log("Err happen");
      }
      return ;
    }
    console.log("Unexpected error occurred");
    return ;
  }
}

function OptionsApp(props) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useState(function () {
        return "UnLogined";
      });
  var setUser = match[1];
  var user = match[0];
  React.useEffect((function () {
          var getUser = async function () {
            var result = await chrome.storage.local.get(["user"]);
            var u = result.user;
            return setUser(function (param) {
                        return u;
                      });
          };
          getUser();
        }), []);
  React.useEffect((function () {
          if (url.hash === "") {
            RescriptReactRouter.push("#service");
          }
          
        }), [url]);
  var contentClass = React.useMemo((function () {
          var isRecordUrl = [
              "favorite",
              "history"
            ].includes(url.hash);
          if (isRecordUrl) {
            return "";
          } else {
            return "p-5";
          }
        }), [url.hash]);
  var logout = function (param) {
    chrome.storage.local.remove(["user"]);
    setUser(function (param) {
          return "UnLogined";
        });
  };
  var tmp;
  tmp = typeof user !== "object" ? "" : user.profileImage;
  var hasLoginedComponent = React.createElement("div", {
        className: "dropdown dropdown-end"
      }, React.createElement("label", {
            className: "btn btn-ghost btn-circle avatar",
            tabIndex: 0
          }, React.createElement("div", {
                className: "w-10 rounded-full"
              }, React.createElement("img", {
                    src: tmp
                  }))), React.createElement("ul", {
            className: "mt-3 z-[99] p-2 shadow menu menu-compact dropdown-content bg-base-100 border border-slate-500 rounded-box w-52",
            tabIndex: 1
          }, React.createElement("li", undefined, React.createElement("a", {
                    className: "justify-between"
                  }, "Profile")), React.createElement("li", {
                onClick: logout
              }, React.createElement("a", undefined, "Logout"))));
  var loginStatus;
  loginStatus = typeof user !== "object" ? React.createElement("button", {
          className: "btn btn-neutral",
          onClick: (function (param) {
              window.login.showModal();
            })
        }, "Login") : hasLoginedComponent;
  var handleCommit = async function (user) {
    setUser(user);
    window.login.close();
    await getRecordsWithServer("favorite");
    await getRecordsWithServer("history");
  };
  var match$1 = url.hash === "service";
  var match$2 = url.hash === "shortcut";
  var match$3 = url.hash === "favorite";
  var match$4 = url.hash === "history";
  var match$5 = url.hash;
  var tmp$1;
  switch (match$5) {
    case "favorite" :
        tmp$1 = React.createElement(Favorite.make, {});
        break;
    case "history" :
        tmp$1 = React.createElement($$History.make, {});
        break;
    case "service" :
        tmp$1 = React.createElement(TranslateService.make, {});
        break;
    case "shortcut" :
        tmp$1 = React.createElement(Shortcut.make, {});
        break;
    default:
      tmp$1 = "Page Not Found";
  }
  return React.createElement("div", {
              className: "bg-base-200"
            }, React.createElement("div", {
                  className: "flex flex-col gap-1 h-screen"
                }, React.createElement("div", {
                      className: "navbar bg-base-100"
                    }, React.createElement("div", {
                          className: "flex-1"
                        }, React.createElement("a", {
                              className: "btn btn-ghost normal-case text-xl",
                              href: "#service"
                            }, React.createElement("img", {
                                  className: " inline-block mr-2",
                                  src: "/icons/lw32x32.png"
                                }), "Love Word")), React.createElement("div", {
                          className: "flex gap-2"
                        }, loginStatus), React.createElement("dialog", {
                          className: "modal",
                          id: "login"
                        }, React.createElement("form", {
                              className: "modal-box",
                              method: "dialog"
                            }, React.createElement(Login.make, {
                                  onSubmit: (function (u) {
                                      return handleCommit(u);
                                    }),
                                  onCancel: (function () {
                                      window.login.close();
                                    })
                                })))), React.createElement("div", {
                      className: "flex flex-1 gap-1 overflow-y-hidden"
                    }, React.createElement("div", {
                          className: "overflow-y-auto bg-base-100"
                        }, React.createElement("ul", {
                              className: "menu bg-base-100 w-56 p-2"
                            }, React.createElement("li", {
                                  className: "menu-title"
                                }, React.createElement("span", undefined, "Setting")), React.createElement("li", undefined, React.createElement("a", {
                                      className: match$1 ? "active" : "",
                                      href: "#service"
                                    }, "Translate Service")), React.createElement("li", undefined, React.createElement("a", {
                                      className: match$2 ? "active" : "",
                                      href: "#shortcut"
                                    }, "Shortcut")), React.createElement("div", {
                                  className: "divider"
                                }), React.createElement("li", {
                                  className: "menu-title"
                                }, React.createElement("span", undefined, "User")), React.createElement("li", undefined, React.createElement("a", {
                                      className: match$3 ? "active" : "",
                                      href: "#favorite"
                                    }, "Favorite")), React.createElement("li", undefined, React.createElement("a", {
                                      className: match$4 ? "active" : "",
                                      href: "#history"
                                    }, "History Query")))), React.createElement("div", {
                          className: "flex-1 overflow-y-auto bg-base-200 " + contentClass
                        }, tmp$1))));
}

var make = OptionsApp;

export {
  getRecordsWithServer ,
  make ,
}
/* Login Not a pure module */
