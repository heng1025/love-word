// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Idb from "idb";
import * as Utils from "../src/Utils.js";
import * as Fixture from "./utils/Fixture.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Background from "../src/Background.js";

var mockOpenDB = Idb.openDB;

vi.mock("idb", undefined);

async function factory(importOriginal) {
  var mod = await importOriginal();
  var copy = Object.assign({}, mod);
  copy.adapterTrans = vi.fn(undefined);
  return copy;
}

vi.mock("../src/Utils.js", factory);

Fixture.chromeGetStoreSpy.mockReturnValue({
      user: "iron"
    });

var sender = {
  origin: "",
  url: "",
  tab: undefined
};

var textMsgContent = {
  text: "hello"
};

var recordsMsgContent = {
  records: [{
      text: "hello",
      date: 1702448855816.0
    }]
};

function translateSuite() {
  test("translateMessageHandler works", (async function () {
          Utils.adapterTrans.mockResolvedValue("你好");
          var mockSendResponse = vi.fn(undefined);
          await Background.translateMessageHandler(textMsgContent, mockSendResponse);
          expect(mockSendResponse).toHaveBeenCalledWith("你好");
        }));
  test("translation message", (async function () {
          var mockSendResponse = vi.fn(undefined);
          var result = Background.handleMessage({
                TAG: "TranslateMsgContent",
                _0: textMsgContent
              }, sender, mockSendResponse);
          expect(result).toBe(true);
          return await vi.waitFor(function () {
                      expect(mockSendResponse).toHaveBeenCalledWith("你好");
                    });
        }));
}

function favoriteSuite() {
  test("word already exists in favorites", (async function () {
          mockOpenDB.mockResolvedValue({
                getFromIndex: vi.fn(undefined).mockResolvedValue(true)
              });
          var mockSendResponse = vi.fn(undefined);
          var result = Background.handleMessage({
                TAG: "FavGetOneMsgContent",
                _0: textMsgContent
              }, sender, mockSendResponse);
          expect(result).toBe(true);
          return await vi.waitFor(function () {
                      expect(mockSendResponse).toHaveBeenCalledWith(true);
                    });
        }));
  test("add a word to favorites", (async function () {
          mockOpenDB.mockResolvedValue({
                add: vi.fn(undefined).mockResolvedValue()
              });
          var favAddMsgContent_translation = Fixture.baiduData;
          var favAddMsgContent = {
            text: "hello",
            translation: favAddMsgContent_translation
          };
          var mockSendResponse = vi.fn(undefined);
          var result = Background.handleMessage({
                TAG: "FavAddMsgContent",
                _0: favAddMsgContent
              }, sender, mockSendResponse);
          expect(result).toBe(true);
          return await vi.waitFor(function () {
                      expect(mockSendResponse).toHaveBeenCalledWith(true);
                    });
        }));
  test("add many words to favorites", (async function () {
          mockOpenDB.mockResolvedValue({
                add: vi.fn(undefined).mockResolvedValue()
              });
          var newrecord = Caml_obj.obj_dup(Fixture.dictRecord);
          newrecord.sync = true;
          var mockSendResponse = vi.fn(undefined);
          var result = Background.handleMessage({
                TAG: "FavAddManyMsgContent",
                _0: [newrecord]
              }, sender, mockSendResponse);
          expect(result).toBe(true);
          return await vi.waitFor(function () {
                      expect(mockSendResponse).toHaveBeenCalledWith(true);
                    });
        }));
  test("delete a word to favorites", (async function () {
          mockOpenDB.mockResolvedValue({
                getKeyFromIndex: vi.fn(undefined).mockResolvedValue(1),
                delete: vi.fn(undefined).mockResolvedValue()
              });
          var mockSendResponse = vi.fn(undefined);
          var result = Background.handleMessage({
                TAG: "FavDeleteOneMsgContent",
                _0: textMsgContent
              }, sender, mockSendResponse);
          expect(result).toBe(true);
          return await vi.waitFor(function () {
                      expect(mockSendResponse).toHaveBeenCalledWith(false);
                    });
        }));
  test("delete many words to favorites", (async function () {
          var mockTransaction = {
            done: vi.fn(undefined).mockResolvedValue(),
            store: {
              delete: vi.fn(undefined).mockResolvedValue()
            }
          };
          mockOpenDB.mockResolvedValue({
                delete: vi.fn(undefined).mockResolvedValue(),
                transaction: vi.fn(undefined).mockReturnValue(mockTransaction)
              });
          var mockSendResponse = vi.fn(undefined);
          var result = Background.handleMessage({
                TAG: "FavDeleteManyMsgContent",
                _0: recordsMsgContent
              }, sender, mockSendResponse);
          expect(result).toBe(true);
          return await vi.waitFor(function () {
                      expect(mockSendResponse).toHaveBeenCalledWith(false);
                    });
        }));
  test("get all words from favorites", (async function () {
          mockOpenDB.mockResolvedValue({
                getAllFromIndex: vi.fn(undefined).mockResolvedValue(["hello"])
              });
          var mockSendResponse = vi.fn(undefined);
          var result = Background.handleMessage({
                TAG: "FavExtraMsgContent",
                _0: "GetAll"
              }, sender, mockSendResponse);
          expect(result).toBe(true);
          return await vi.waitFor(function () {
                      expect(mockSendResponse).toHaveBeenCalledWith(["hello"]);
                    });
        }));
  test("clear all words in favorites", (async function () {
          mockOpenDB.mockResolvedValue({
                clear: vi.fn(undefined).mockResolvedValue()
              });
          var mockSendResponse = vi.fn(undefined);
          var result = Background.handleMessage({
                TAG: "FavExtraMsgContent",
                _0: "Clear"
              }, sender, mockSendResponse);
          expect(result).toBe(true);
          return await vi.waitFor(function () {
                      expect(mockSendResponse).toHaveBeenCalled();
                    });
        }));
}

function historySuite() {
  test("add a word to history", (async function () {
          mockOpenDB.mockResolvedValue({
                getFromIndex: vi.fn(undefined).mockResolvedValue(false),
                add: vi.fn(undefined).mockResolvedValue()
              });
          var mockSendResponse = vi.fn(undefined);
          var result = Background.handleMessage({
                TAG: "HistoryAddMsgContent",
                _0: textMsgContent
              }, sender, mockSendResponse);
          expect(result).toBe(true);
          return await vi.waitFor(function () {
                      expect(mockSendResponse).toHaveBeenCalled();
                    });
        }));
}

describe("Background service", (function () {
        afterEach(function () {
              vi.clearAllMocks();
            });
        test("browser tab information", (function () {
                var tab = Background.getBrowserTab(sender);
                expect(tab.title).toBe("Love Word");
                var copySender = Object.assign({}, sender);
                copySender.tab = {
                  url: "1r21.cn"
                };
                var tab$1 = Background.getBrowserTab(copySender);
                expect(tab$1.url).toBe("1r21.cn");
              }));
        describe("Translation message", translateSuite);
        describe("Favorites message", favoriteSuite);
        describe("History message", historySuite);
      }));

export {
  mockOpenDB ,
  factory ,
  sender ,
  textMsgContent ,
  recordsMsgContent ,
  translateSuite ,
  favoriteSuite ,
  historySuite ,
}
/* mockOpenDB Not a pure module */
