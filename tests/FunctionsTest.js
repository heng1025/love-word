// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fixture from "./utils/Fixture.js";
import * as Functions from "../src/Functions.js";

Fixture.chromeGetStoreSpy.mockResolvedValue({
      user: "iron"
    });

describe("Functions module", (function () {
        test("includeWith works", (function () {
                var res = Functions.includeWith("hello", "he");
                expect(res).toBe(true);
              }));
        test("fetchByHttp works", (async function () {
                var ret = Fixture.createMockHttpResponse(undefined, undefined, {
                      word: "hello"
                    });
                Fixture.fetchSpy.mockResolvedValue(ret);
                var res = await Functions.fetchByHttp("/dict", undefined, undefined);
                expect(res).toStrictEqual({
                      TAG: "Ok",
                      _0: ret.json().data
                    });
              }));
        test("fetchByHttp works with error", (async function () {
                var ret = Fixture.createMockHttpResponse(2, "error", undefined);
                Fixture.fetchSpy.mockResolvedValue(ret);
                var res = await Functions.fetchByHttp("/dict", undefined, undefined);
                expect(res).toStrictEqual({
                      TAG: "Error",
                      _0: ret.json().msg
                    });
              }));
        test.each([
                {
                  exn: (function () {
                      throw new Error("js error");
                    }),
                  expected: "js error"
                },
                {
                  exn: (function () {
                      throw {
                            RE_EXN_ID: "Not_found",
                            Error: new Error()
                          };
                    }),
                  expected: "Unexpected error occurred"
                }
              ])("fetchByHttp works with $expected  exception", (async function (cases) {
                Fixture.fetchSpy.mockImplementation(function () {
                      return cases.exn();
                    });
                var res = await Functions.fetchByHttp("/dict", undefined, undefined);
                expect(res).toStrictEqual({
                      TAG: "Error",
                      _0: cases.expected
                    });
              }));
        test("debounce works", (function () {
                vi.useFakeTimers();
                var callbackSpy = vi.fn(undefined);
                var match = Functions.debounce(1000, callbackSpy);
                match[0]();
                expect(callbackSpy).not.toHaveBeenCalled();
                vi.runAllTimers();
                expect(callbackSpy).toHaveBeenCalled();
              }));
        test("debounce works with cancel", (function () {
                vi.useFakeTimers();
                var callbackSpy = vi.fn(undefined);
                var match = Functions.debounce(1000, callbackSpy);
                match[0]();
                match[1]();
                vi.runAllTimers();
                expect(callbackSpy).not.toHaveBeenCalled();
              }));
      }));

export {
  
}
/*  Not a pure module */
