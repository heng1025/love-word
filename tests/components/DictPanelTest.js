// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Fixture from "../utils/Fixture.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as DictPanel from "../../src/components/DictPanel.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as TestBinding from "../utils/TestBinding.js";
import * as React$1 from "@testing-library/react";
import * as UserEvent from "@testing-library/user-event";

describe("DictPanel component", (function () {
        test("renders correctly", (function () {
                TestBinding.ReactTestingLibrary.render(React.createElement(DictPanel.make, {
                          data: Fixture.dictData
                        }), undefined, undefined, undefined, undefined, undefined);
                var phonetic = React$1.screen.getByText("[ hә'lәu ]", undefined);
                var translation = React$1.screen.getByText("interj. 喂, 嘿", undefined);
                var tag = React$1.screen.getByText("zk", undefined);
                var tags = React$1.screen.getAllByRole("mark", undefined);
                expect(phonetic).toBeInTheDocument();
                expect(translation).toBeInTheDocument();
                expect(tag).toBeInTheDocument();
                expect(tags).toHaveLength(2);
              }));
        test("renders empty", (function () {
                var newrecord = Caml_obj.obj_dup(Fixture.dictData);
                newrecord.tag = "";
                newrecord.phonetic = "";
                newrecord.translation = "";
                TestBinding.ReactTestingLibrary.render(React.createElement(DictPanel.make, {
                          data: newrecord
                        }), undefined, undefined, undefined, undefined, undefined);
                var phonetic = React$1.screen.queryByText("[ hә'lәu ]", undefined);
                var translation = React$1.screen.queryByText("interj. 喂, 嘿", undefined);
                var tag = React$1.screen.queryByText("zk", undefined);
                var tags = React$1.screen.queryAllByRole("mark", undefined);
                expect(phonetic).not.toBeInTheDocument();
                expect(translation).not.toBeInTheDocument();
                expect(tag).not.toBeInTheDocument();
                expect(tags).toHaveLength(0);
              }));
        test("click phonetic button", (async function () {
                TestBinding.ReactTestingLibrary.render(React.createElement(DictPanel.make, {
                          data: Fixture.dictData
                        }), undefined, undefined, undefined, undefined, undefined);
                var speaker = React$1.screen.getByTestId("play", undefined);
                expect(speaker).not.toHaveClass("animate-fadeInOut-200ms");
                var user = UserEvent.userEvent.setup(undefined);
                await user.click(speaker);
                expect(speaker).toHaveClass("animate-fadeInOut-200ms");
                await user.click(speaker);
                expect(speaker).not.toHaveClass("animate-fadeInOut-200ms");
              }));
        test("phonetic play / ended event", (async function () {
                var newrecord = Caml_obj.obj_dup(Fixture.dictData);
                newrecord.tag = "";
                newrecord.translation = "";
                TestBinding.ReactTestingLibrary.render(React.createElement(DictPanel.make, {
                          data: newrecord
                        }), undefined, undefined, undefined, undefined, undefined);
                var speaker = React$1.screen.getByTestId("play", undefined);
                var user = UserEvent.userEvent.setup(undefined);
                await user.click(speaker);
                var mockAudioResults = self.Audio.mock.results;
                var mockAudioInstance = Caml_array.get(mockAudioResults, 0).value;
                expect(mockAudioInstance.play).toHaveBeenCalled();
                var onEndedSpy = vi.spyOn(mockAudioInstance, "onended");
                React$1.act(function () {
                      mockAudioInstance.onended();
                    });
                expect(onEndedSpy).toHaveBeenCalled();
                return await React$1.waitFor((function () {
                              expect(speaker).not.toHaveClass("animate-fadeInOut-200ms");
                            }), undefined);
              }));
      }));

export {
  
}
/*  Not a pure module */
