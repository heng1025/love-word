// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fixture from "../utils/Fixture.js";
import * as TestBinding from "../utils/TestBinding.js";
import * as TranslateResult from "../../src/components/TranslateResult.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as React from "@testing-library/react";

describe("StatelessTPanel component", (function () {
        test("show dict panel", (function () {
                var wrapper = TestBinding.ReactTestingLibrary.render(JsxRuntime.jsx(TranslateResult.StatelessTPanel.make, {
                          data: Fixture.dictData
                        }), undefined, undefined, undefined, undefined, undefined);
                var phonetic = React.screen.getByText("[ hә'lәu ]", undefined);
                var transWrap = React.screen.getByTestId("transWrap", undefined);
                expect(phonetic).toBeInTheDocument();
                expect(transWrap).not.toHaveClass("my-text-sm");
                wrapper.rerender(JsxRuntime.jsx(TranslateResult.StatelessTPanel.make, {
                          data: Fixture.dictData,
                          className: "my-text-sm"
                        }));
                expect(transWrap).toHaveClass("my-text-sm");
              }));
        test("show machine translate panel", (function () {
                TestBinding.ReactTestingLibrary.render(JsxRuntime.jsx(TranslateResult.StatelessTPanel.make, {
                          data: Fixture.baiduData
                        }), undefined, undefined, undefined, undefined, undefined);
                var translation = React.screen.getByText("hello", undefined);
                expect(translation).toBeInTheDocument();
              }));
      }));

describe("TranslateResult component", (function () {
        test("show loading panel", (async function () {
                TestBinding.ReactTestingLibrary.render(JsxRuntime.jsx(TranslateResult.make, {
                          loading: true,
                          delay: 150
                        }), undefined, undefined, undefined, undefined, undefined);
                var loading = await React.screen.findByTestId("loading", undefined);
                expect(loading).toBeInTheDocument();
              }));
        test("show translate error message", (async function () {
                TestBinding.ReactTestingLibrary.render(JsxRuntime.jsx(TranslateResult.make, {
                          loading: true,
                          data: {
                            TAG: "Error",
                            _0: "error"
                          },
                          delay: 150
                        }), undefined, undefined, undefined, undefined, undefined);
                var alert = React.screen.getByRole("alert", undefined);
                expect(alert).toHaveClass("text-error");
              }));
        test("show empty translate result", (function () {
                var data = {
                  TAG: "Ok",
                  _0: null
                };
                TestBinding.ReactTestingLibrary.render(JsxRuntime.jsx(TranslateResult.make, {
                          data: data
                        }), undefined, undefined, undefined, undefined, undefined);
                var empty = React.screen.getByText("No translation", undefined);
                expect(empty).toBeInTheDocument();
              }));
        test("show correct translate result", (function () {
                var wrapperBaiduData = {
                  TAG: "Ok",
                  _0: Fixture.baiduData
                };
                var wrapper = TestBinding.ReactTestingLibrary.render(JsxRuntime.jsx(TranslateResult.make, {
                          data: wrapperBaiduData
                        }), undefined, undefined, undefined, undefined, undefined);
                var empty = React.screen.getByText("hello", undefined);
                expect(empty).toBeInTheDocument();
                var transWrap = React.screen.getByTestId("transWrap", undefined);
                expect(transWrap).not.toHaveClass("my-text-sm");
                wrapper.rerender(JsxRuntime.jsx(TranslateResult.make, {
                          data: wrapperBaiduData,
                          className: "my-text-sm"
                        }));
                expect(transWrap).toHaveClass("my-text-sm");
              }));
      }));

export {
  
}
/*  Not a pure module */
